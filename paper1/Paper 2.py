# -*- coding: utf-8 -*-
"""Prosper_Classification_method2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1REcWYHkPK1-KobxXhLbKnTxXeoOZHQYJ
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
from sklearn.pipeline import Pipeline
import pandas as pd
import csv
#from google.colab import drive


from sklearn.naive_bayes import BernoulliNB, MultinomialNB
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

from sklearn.model_selection import GridSearchCV
from sklearn.metrics import precision_recall_fscore_support, precision_score, recall_score, accuracy_score, f1_score
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import cross_val_score, cross_validate, cross_val_predict

#from google.colab import drive
#drive.mount('content/gdrive')
#path_folder ="/content/gdrive/My Drive/PhD/Prosper/"
#path_folder =""

df = pd.read_excel('features_data_with_label_v2.xlsx')
print(df['date'])
df['month']=df['date'].apply(lambda x: int(x.split('/')[1]))
print(df['month'])

df_training = df.loc[df['month'] <= 8]
print(df_training.shape[0])

df_testing = df.loc[df['month'] > 8]
print(df_testing.shape[0])

X = df_training[['number_of_create' , 'number_of_read' , 'number_of_update' , 'number_of_delete' , 'number_of_patient_record' , 'number_of_unique_patient_record' , 'number_of_modules' , 'number_of_report_module' , 'number_of_finance_module' , 'number_of_patient_module' , 'number_of_lab_module' , 'number_of_pharmacy_module' , 'number_of_access_warning' , 'number_of_outside_access' , 'number_of_browser' , 'number_of_chrome' , 'number_of_ie' , 'number_of_safari' , 'number_of_firefox' , 'number_of_otherbrowser' ]]
y = df_training['anomaly']

S = df_testing[['number_of_create' , 'number_of_read' , 'number_of_update' , 'number_of_delete' , 'number_of_patient_record' , 'number_of_unique_patient_record' , 'number_of_modules' , 'number_of_report_module' , 'number_of_finance_module' , 'number_of_patient_module' , 'number_of_lab_module' , 'number_of_pharmacy_module' , 'number_of_access_warning' , 'number_of_outside_access' , 'number_of_browser' , 'number_of_chrome' , 'number_of_ie' , 'number_of_safari' , 'number_of_firefox' , 'number_of_otherbrowser' ]]
t = df_testing['anomaly']


df_testing_normal = df_testing.loc[df_testing['anomaly'] == 0]
df_testing_anomaly = df_testing.loc[df_testing['anomaly'] == 1]

print(df_testing_normal['number_of_patient_record'])
print(df_testing_anomaly['number_of_patient_record'])

all_models = [
    ("mult_nb", MultinomialNB()),
    ("bern_nb", BernoulliNB()),
    ("knn", KNeighborsClassifier(5)),
    ("nn", MLPClassifier()),
    ("lr", LogisticRegression()),
    ("rf", RandomForestClassifier()),
    ("dt", DecisionTreeClassifier()),
    ("svm", SVC(kernel='linear', probability=True))
]

for name, model in all_models: 
  clf=model
  print(name)
  clf.fit(X, y)
  result = clf.predict(S)
  prec = precision_score(result, t)
  rec = recall_score(result, t)
  acc = accuracy_score(result, t)
  f1 = f1_score(result, t)
  print(name+' & '+ str(acc) + ' & ' +str(prec)+ ' & ' +str(rec)+ ' & ' +str(f1)+ '\\\\')